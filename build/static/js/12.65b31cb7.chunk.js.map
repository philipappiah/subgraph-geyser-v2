{"version":3,"sources":["../node_modules/bs58/index.js","../node_modules/bs58check/index.js","../node_modules/bs58check/base.js","../node_modules/base-x/src/index.js","../node_modules/hdkey/lib/hdkey.js","../node_modules/hdkey/node_modules/secp256k1/elliptic.js","../node_modules/hdkey/node_modules/secp256k1/lib/index.js","../node_modules/hdkey/node_modules/secp256k1/lib/elliptic.js","../node_modules/bnc-onboard/dist/esm/hd-wallet-642b97e3.js"],"names":["basex","require","module","exports","createHash","bs58checkBase","buffer","tmp","update","digest","base58","Buffer","checksumFn","decodeRaw","payload","slice","checksum","newChecksum","encode","concat","length","decode","string","Error","decodeUnsafe","_Buffer","ALPHABET","TypeError","BASE_MAP","Uint8Array","j","i","x","charAt","xc","charCodeAt","BASE","LEADER","FACTOR","Math","log","iFACTOR","source","alloc","psz","zeroes","size","b256","carry","it3","it4","vch","allocUnsafe","fill","Array","isArray","from","isBuffer","pbegin","pend","b58","it1","it2","str","repeat","assert","crypto","bs58check","secp256k1","MASTER_SECRET","HARDENED_OFFSET","BITCOIN_VERSIONS","private","public","HDKey","versions","this","depth","index","_privateKey","_publicKey","chainCode","_fingerprint","parentFingerprint","serialize","hdkey","version","key","writeUInt32BE","writeUInt8","fingerprint","copy","hash160","buf","sha","Object","defineProperty","prototype","get","_identifier","identifier","set","value","equal","privateKeyVerify","publicKeyCreate","publicKey","readUInt32BE","publicKeyVerify","publicKeyConvert","privateKey","derive","path","entries","split","forEach","c","hardened","childIndex","parseInt","deriveChild","test","data","isHardened","indexBuffer","pk","zb","I","createHmac","IL","IR","hd","privateKeyTweakAdd","err","publicKeyTweakAdd","sign","hash","ecdsaSign","signature","verify","ecdsaVerify","wipePrivateData","randomBytes","toJSON","xpriv","privateExtendedKey","xpub","publicExtendedKey","fromMasterSeed","seedBuffer","fromExtendedKey","base58key","keyBuffer","readUInt8","fromJSON","obj","errors","cond","msg","isUint8Array","name","undefined","numbers","join","includes","isCompressed","toTypeString","getAssertedOutput","output","len","toString","call","contextRandomize","seed","seckey","privateKeyNegate","tweak","privateKeyTweakMul","pubkey","compressed","publicKeyNegate","publicKeyCombine","pubkeys","publicKeyTweakMul","signatureNormalize","sig","signatureExport","outputlen","signatureImport","msg32","options","noncefn","recid","ecdsaRecover","ecdh","hashfn","xbuf","ybuf","ec","EC","ecparams","curve","BN","n","constructor","loadPublicKey","first","cmp","p","y","toRed","red","redSqr","redIMul","redIAdd","b","redSqrt","isOdd","redNeg","keyPair","pub","loadCompressedPublicKey","subarray","x3","redISub","isZero","loadUncompressedPublicKey","savePublicKey","point","bn","negate","sub","umod","toArrayLike","iadd","isub","tweaked","imul","keyFromPrivate","getPublic","pair","pairs","add","isInfinity","g","mul","r","s","nh","sigR","sigS","lenR","posR","lenS","posS","message","_noncefn","counter","nonce","d","canonical","k","pers","recoveryParam","sigObj","sigr","sigs","recoverPubKey","scalar","sha256","getX","toArray","getY","publicToAddress","ethUtil","toChecksumAddress","generateAddresses","account","offset","hdk","addresses","dkey","address","push","dPath","isValidPath","parts","accountFieldDigit","Number","isNaN","changeFieldDigit","addressFieldDigit"],"mappings":"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","file":"static/js/12.65b31cb7.chunk.js","sourcesContent":["var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","'use strict'\n\nvar createHash = require('create-hash')\nvar bs58checkBase = require('./base')\n\n// SHA256(SHA256(buffer))\nfunction sha256x2 (buffer) {\n  var tmp = createHash('sha256').update(buffer).digest()\n  return createHash('sha256').update(tmp).digest()\n}\n\nmodule.exports = bs58checkBase(sha256x2)\n","'use strict'\n\nvar base58 = require('bs58')\nvar Buffer = require('safe-buffer').Buffer\n\nmodule.exports = function (checksumFn) {\n  // Encode a buffer as a base58-check encoded string\n  function encode (payload) {\n    var checksum = checksumFn(payload)\n\n    return base58.encode(Buffer.concat([\n      payload,\n      checksum\n    ], payload.length + 4))\n  }\n\n  function decodeRaw (buffer) {\n    var payload = buffer.slice(0, -4)\n    var checksum = buffer.slice(-4)\n    var newChecksum = checksumFn(payload)\n\n    if (checksum[0] ^ newChecksum[0] |\n        checksum[1] ^ newChecksum[1] |\n        checksum[2] ^ newChecksum[2] |\n        checksum[3] ^ newChecksum[3]) return\n\n    return payload\n  }\n\n  // Decode a base58-check encoded string to a buffer, no result if checksum is wrong\n  function decodeUnsafe (string) {\n    var buffer = base58.decodeUnsafe(string)\n    if (!buffer) return\n\n    return decodeRaw(buffer)\n  }\n\n  function decode (string) {\n    var buffer = base58.decode(string)\n    var payload = decodeRaw(buffer, checksumFn)\n    if (!payload) throw new Error('Invalid checksum')\n    return payload\n  }\n\n  return {\n    encode: encode,\n    decode: decode,\n    decodeUnsafe: decodeUnsafe\n  }\n}\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip leading spaces.\n    if (source[psz] === ' ') { return }\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip trailing spaces.\n    if (source[psz] === ' ') { return }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","var assert = require('assert')\nvar Buffer = require('safe-buffer').Buffer\nvar crypto = require('crypto')\nvar bs58check = require('bs58check')\nvar secp256k1 = require('secp256k1')\n\nvar MASTER_SECRET = Buffer.from('Bitcoin seed', 'utf8')\nvar HARDENED_OFFSET = 0x80000000\nvar LEN = 78\n\n// Bitcoin hardcoded by default, can use package `coininfo` for others\nvar BITCOIN_VERSIONS = {private: 0x0488ADE4, public: 0x0488B21E}\n\nfunction HDKey (versions) {\n  this.versions = versions || BITCOIN_VERSIONS\n  this.depth = 0\n  this.index = 0\n  this._privateKey = null\n  this._publicKey = null\n  this.chainCode = null\n  this._fingerprint = 0\n  this.parentFingerprint = 0\n}\n\nObject.defineProperty(HDKey.prototype, 'fingerprint', { get: function () { return this._fingerprint } })\nObject.defineProperty(HDKey.prototype, 'identifier', { get: function () { return this._identifier } })\nObject.defineProperty(HDKey.prototype, 'pubKeyHash', { get: function () { return this.identifier } })\n\nObject.defineProperty(HDKey.prototype, 'privateKey', {\n  get: function () {\n    return this._privateKey\n  },\n  set: function (value) {\n    assert.equal(value.length, 32, 'Private key must be 32 bytes.')\n    assert(secp256k1.privateKeyVerify(value) === true, 'Invalid private key')\n\n    this._privateKey = value\n    this._publicKey = Buffer.from(secp256k1.publicKeyCreate(value, true))\n    this._identifier = hash160(this.publicKey)\n    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0)\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'publicKey', {\n  get: function () {\n    return this._publicKey\n  },\n  set: function (value) {\n    assert(value.length === 33 || value.length === 65, 'Public key must be 33 or 65 bytes.')\n    assert(secp256k1.publicKeyVerify(value) === true, 'Invalid public key')\n\n    this._publicKey = Buffer.from(secp256k1.publicKeyConvert(value, true)) // force compressed point\n    this._identifier = hash160(this.publicKey)\n    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0)\n    this._privateKey = null\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'privateExtendedKey', {\n  get: function () {\n    if (this._privateKey) return bs58check.encode(serialize(this, this.versions.private, Buffer.concat([Buffer.alloc(1, 0), this.privateKey])))\n    else return null\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'publicExtendedKey', {\n  get: function () {\n    return bs58check.encode(serialize(this, this.versions.public, this.publicKey))\n  }\n})\n\nHDKey.prototype.derive = function (path) {\n  if (path === 'm' || path === 'M' || path === \"m'\" || path === \"M'\") {\n    return this\n  }\n\n  var entries = path.split('/')\n  var hdkey = this\n  entries.forEach(function (c, i) {\n    if (i === 0) {\n      assert(/^[mM]{1}/.test(c), 'Path must start with \"m\" or \"M\"')\n      return\n    }\n\n    var hardened = (c.length > 1) && (c[c.length - 1] === \"'\")\n    var childIndex = parseInt(c, 10) // & (HARDENED_OFFSET - 1)\n    assert(childIndex < HARDENED_OFFSET, 'Invalid index')\n    if (hardened) childIndex += HARDENED_OFFSET\n\n    hdkey = hdkey.deriveChild(childIndex)\n  })\n\n  return hdkey\n}\n\nHDKey.prototype.deriveChild = function (index) {\n  var isHardened = index >= HARDENED_OFFSET\n  var indexBuffer = Buffer.allocUnsafe(4)\n  indexBuffer.writeUInt32BE(index, 0)\n\n  var data\n\n  if (isHardened) { // Hardened child\n    assert(this.privateKey, 'Could not derive hardened child key')\n\n    var pk = this.privateKey\n    var zb = Buffer.alloc(1, 0)\n    pk = Buffer.concat([zb, pk])\n\n    // data = 0x00 || ser256(kpar) || ser32(index)\n    data = Buffer.concat([pk, indexBuffer])\n  } else { // Normal child\n    // data = serP(point(kpar)) || ser32(index)\n    //      = serP(Kpar) || ser32(index)\n    data = Buffer.concat([this.publicKey, indexBuffer])\n  }\n\n  var I = crypto.createHmac('sha512', this.chainCode).update(data).digest()\n  var IL = I.slice(0, 32)\n  var IR = I.slice(32)\n\n  var hd = new HDKey(this.versions)\n\n  // Private parent key -> private child key\n  if (this.privateKey) {\n    // ki = parse256(IL) + kpar (mod n)\n    try {\n      hd.privateKey = Buffer.from(secp256k1.privateKeyTweakAdd(Buffer.from(this.privateKey), IL))\n      // throw if IL >= n || (privateKey + IL) === 0\n    } catch (err) {\n      // In case parse256(IL) >= n or ki == 0, one should proceed with the next value for i\n      return this.deriveChild(index + 1)\n    }\n  // Public parent key -> public child key\n  } else {\n    // Ki = point(parse256(IL)) + Kpar\n    //    = G*IL + Kpar\n    try {\n      hd.publicKey = Buffer.from(secp256k1.publicKeyTweakAdd(Buffer.from(this.publicKey), IL, true))\n      // throw if IL >= n || (g**IL + publicKey) is infinity\n    } catch (err) {\n      // In case parse256(IL) >= n or Ki is the point at infinity, one should proceed with the next value for i\n      return this.deriveChild(index + 1)\n    }\n  }\n\n  hd.chainCode = IR\n  hd.depth = this.depth + 1\n  hd.parentFingerprint = this.fingerprint// .readUInt32BE(0)\n  hd.index = index\n\n  return hd\n}\n\nHDKey.prototype.sign = function (hash) {\n  return Buffer.from(secp256k1.ecdsaSign(hash, this.privateKey).signature)\n}\n\nHDKey.prototype.verify = function (hash, signature) {\n  return secp256k1.ecdsaVerify(\n    Uint8Array.from(signature),\n    Uint8Array.from(hash),\n    Uint8Array.from(this.publicKey)\n  )\n}\n\nHDKey.prototype.wipePrivateData = function () {\n  if (this._privateKey) crypto.randomBytes(this._privateKey.length).copy(this._privateKey)\n  this._privateKey = null\n  return this\n}\n\nHDKey.prototype.toJSON = function () {\n  return {\n    xpriv: this.privateExtendedKey,\n    xpub: this.publicExtendedKey\n  }\n}\n\nHDKey.fromMasterSeed = function (seedBuffer, versions) {\n  var I = crypto.createHmac('sha512', MASTER_SECRET).update(seedBuffer).digest()\n  var IL = I.slice(0, 32)\n  var IR = I.slice(32)\n\n  var hdkey = new HDKey(versions)\n  hdkey.chainCode = IR\n  hdkey.privateKey = IL\n\n  return hdkey\n}\n\nHDKey.fromExtendedKey = function (base58key, versions) {\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n  versions = versions || BITCOIN_VERSIONS\n  var hdkey = new HDKey(versions)\n\n  var keyBuffer = bs58check.decode(base58key)\n\n  var version = keyBuffer.readUInt32BE(0)\n  assert(version === versions.private || version === versions.public, 'Version mismatch: does not match private or public')\n\n  hdkey.depth = keyBuffer.readUInt8(4)\n  hdkey.parentFingerprint = keyBuffer.readUInt32BE(5)\n  hdkey.index = keyBuffer.readUInt32BE(9)\n  hdkey.chainCode = keyBuffer.slice(13, 45)\n\n  var key = keyBuffer.slice(45)\n  if (key.readUInt8(0) === 0) { // private\n    assert(version === versions.private, 'Version mismatch: version does not match private')\n    hdkey.privateKey = key.slice(1) // cut off first 0x0 byte\n  } else {\n    assert(version === versions.public, 'Version mismatch: version does not match public')\n    hdkey.publicKey = key\n  }\n\n  return hdkey\n}\n\nHDKey.fromJSON = function (obj) {\n  return HDKey.fromExtendedKey(obj.xpriv)\n}\n\nfunction serialize (hdkey, version, key) {\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n  var buffer = Buffer.allocUnsafe(LEN)\n\n  buffer.writeUInt32BE(version, 0)\n  buffer.writeUInt8(hdkey.depth, 4)\n\n  var fingerprint = hdkey.depth ? hdkey.parentFingerprint : 0x00000000\n  buffer.writeUInt32BE(fingerprint, 5)\n  buffer.writeUInt32BE(hdkey.index, 9)\n\n  hdkey.chainCode.copy(buffer, 13)\n  key.copy(buffer, 45)\n\n  return buffer\n}\n\nfunction hash160 (buf) {\n  var sha = crypto.createHash('sha256').update(buf).digest()\n  return crypto.createHash('ripemd160').update(sha).digest()\n}\n\nHDKey.HARDENED_OFFSET = HARDENED_OFFSET\nmodule.exports = HDKey\n","module.exports = require('./lib')(require('./lib/elliptic'))\n","const errors = {\n  IMPOSSIBLE_CASE: 'Impossible case. Please create issue.',\n  TWEAK_ADD:\n    'The tweak was out of range or the resulted private key is invalid',\n  TWEAK_MUL: 'The tweak was out of range or equal to zero',\n  CONTEXT_RANDOMIZE_UNKNOW: 'Unknow error on context randomization',\n  SECKEY_INVALID: 'Private Key is invalid',\n  PUBKEY_PARSE: 'Public Key could not be parsed',\n  PUBKEY_SERIALIZE: 'Public Key serialization error',\n  PUBKEY_COMBINE: 'The sum of the public keys is not valid',\n  SIG_PARSE: 'Signature could not be parsed',\n  SIGN: 'The nonce generation function failed, or the private key was invalid',\n  RECOVER: 'Public key could not be recover',\n  ECDH: 'Scalar was invalid (zero or overflow)'\n}\n\nfunction assert (cond, msg) {\n  if (!cond) throw new Error(msg)\n}\n\nfunction isUint8Array (name, value, length) {\n  assert(value instanceof Uint8Array, `Expected ${name} to be an Uint8Array`)\n\n  if (length !== undefined) {\n    if (Array.isArray(length)) {\n      const numbers = length.join(', ')\n      const msg = `Expected ${name} to be an Uint8Array with length [${numbers}]`\n      assert(length.includes(value.length), msg)\n    } else {\n      const msg = `Expected ${name} to be an Uint8Array with length ${length}`\n      assert(value.length === length, msg)\n    }\n  }\n}\n\nfunction isCompressed (value) {\n  assert(toTypeString(value) === 'Boolean', 'Expected compressed to be a Boolean')\n}\n\nfunction getAssertedOutput (output = (len) => new Uint8Array(len), length) {\n  if (typeof output === 'function') output = output(length)\n  isUint8Array('output', output, length)\n  return output\n}\n\nfunction toTypeString (value) {\n  return Object.prototype.toString.call(value).slice(8, -1)\n}\n\nmodule.exports = (secp256k1) => {\n  return {\n    contextRandomize (seed) {\n      assert(\n        seed === null || seed instanceof Uint8Array,\n        'Expected seed to be an Uint8Array or null'\n      )\n      if (seed !== null) isUint8Array('seed', seed, 32)\n\n      switch (secp256k1.contextRandomize(seed)) {\n        case 1:\n          throw new Error(errors.CONTEXT_RANDOMIZE_UNKNOW)\n      }\n    },\n\n    privateKeyVerify (seckey) {\n      isUint8Array('private key', seckey, 32)\n\n      return secp256k1.privateKeyVerify(seckey) === 0\n    },\n\n    privateKeyNegate (seckey) {\n      isUint8Array('private key', seckey, 32)\n\n      switch (secp256k1.privateKeyNegate(seckey)) {\n        case 0:\n          return seckey\n        case 1:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    privateKeyTweakAdd (seckey, tweak) {\n      isUint8Array('private key', seckey, 32)\n      isUint8Array('tweak', tweak, 32)\n\n      switch (secp256k1.privateKeyTweakAdd(seckey, tweak)) {\n        case 0:\n          return seckey\n        case 1:\n          throw new Error(errors.TWEAK_ADD)\n      }\n    },\n\n    privateKeyTweakMul (seckey, tweak) {\n      isUint8Array('private key', seckey, 32)\n      isUint8Array('tweak', tweak, 32)\n\n      switch (secp256k1.privateKeyTweakMul(seckey, tweak)) {\n        case 0:\n          return seckey\n        case 1:\n          throw new Error(errors.TWEAK_MUL)\n      }\n    },\n\n    publicKeyVerify (pubkey) {\n      isUint8Array('public key', pubkey, [33, 65])\n\n      return secp256k1.publicKeyVerify(pubkey) === 0\n    },\n\n    publicKeyCreate (seckey, compressed = true, output) {\n      isUint8Array('private key', seckey, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyCreate(output, seckey)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.SECKEY_INVALID)\n        case 2:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyConvert (pubkey, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyConvert(output, pubkey)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyNegate (pubkey, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyNegate(output, pubkey)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n        case 3:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyCombine (pubkeys, compressed = true, output) {\n      assert(Array.isArray(pubkeys), 'Expected public keys to be an Array')\n      assert(pubkeys.length > 0, 'Expected public keys array will have more than zero items')\n      for (const pubkey of pubkeys) {\n        isUint8Array('public key', pubkey, [33, 65])\n      }\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyCombine(output, pubkeys)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.PUBKEY_COMBINE)\n        case 3:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyTweakAdd (pubkey, tweak, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isUint8Array('tweak', tweak, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyTweakAdd(output, pubkey, tweak)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.TWEAK_ADD)\n      }\n    },\n\n    publicKeyTweakMul (pubkey, tweak, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isUint8Array('tweak', tweak, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyTweakMul(output, pubkey, tweak)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.TWEAK_MUL)\n      }\n    },\n\n    signatureNormalize (sig) {\n      isUint8Array('signature', sig, 64)\n\n      switch (secp256k1.signatureNormalize(sig)) {\n        case 0:\n          return sig\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n      }\n    },\n\n    signatureExport (sig, output) {\n      isUint8Array('signature', sig, 64)\n      output = getAssertedOutput(output, 72)\n\n      const obj = { output, outputlen: 72 }\n      switch (secp256k1.signatureExport(obj, sig)) {\n        case 0:\n          return output.slice(0, obj.outputlen)\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    signatureImport (sig, output) {\n      isUint8Array('signature', sig)\n      output = getAssertedOutput(output, 64)\n\n      switch (secp256k1.signatureImport(output, sig)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    ecdsaSign (msg32, seckey, options = {}, output) {\n      isUint8Array('message', msg32, 32)\n      isUint8Array('private key', seckey, 32)\n      assert(toTypeString(options) === 'Object', 'Expected options to be an Object')\n      if (options.data !== undefined) isUint8Array('options.data', options.data)\n      if (options.noncefn !== undefined) assert(toTypeString(options.noncefn) === 'Function', 'Expected options.noncefn to be a Function')\n      output = getAssertedOutput(output, 64)\n\n      const obj = { signature: output, recid: null }\n      switch (secp256k1.ecdsaSign(obj, msg32, seckey, options.data, options.noncefn)) {\n        case 0:\n          return obj\n        case 1:\n          throw new Error(errors.SIGN)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    ecdsaVerify (sig, msg32, pubkey) {\n      isUint8Array('signature', sig, 64)\n      isUint8Array('message', msg32, 32)\n      isUint8Array('public key', pubkey, [33, 65])\n\n      switch (secp256k1.ecdsaVerify(sig, msg32, pubkey)) {\n        case 0:\n          return true\n        case 3:\n          return false\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.PUBKEY_PARSE)\n      }\n    },\n\n    ecdsaRecover (sig, recid, msg32, compressed = true, output) {\n      isUint8Array('signature', sig, 64)\n      assert(\n        toTypeString(recid) === 'Number' &&\n          recid >= 0 &&\n          recid <= 3,\n        'Expected recovery id to be a Number within interval [0, 3]'\n      )\n      isUint8Array('message', msg32, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.ecdsaRecover(output, sig, recid, msg32)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.RECOVER)\n        case 3:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    ecdh (pubkey, seckey, options = {}, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isUint8Array('private key', seckey, 32)\n      assert(toTypeString(options) === 'Object', 'Expected options to be an Object')\n      if (options.data !== undefined) isUint8Array('options.data', options.data)\n      if (options.hashfn !== undefined) {\n        assert(toTypeString(options.hashfn) === 'Function', 'Expected options.hashfn to be a Function')\n        if (options.xbuf !== undefined) isUint8Array('options.xbuf', options.xbuf, 32)\n        if (options.ybuf !== undefined) isUint8Array('options.ybuf', options.ybuf, 32)\n        isUint8Array('output', output)\n      } else {\n        output = getAssertedOutput(output, 32)\n      }\n\n      switch (secp256k1.ecdh(output, pubkey, seckey, options.data, options.hashfn, options.xbuf, options.ybuf)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.ECDH)\n      }\n    }\n  }\n}\n","const EC = require('elliptic').ec\n\nconst ec = new EC('secp256k1')\nconst ecparams = ec.curve\n\n// Hack, we can not use bn.js@5, while elliptic uses bn.js@4\n// See https://github.com/indutny/elliptic/issues/191#issuecomment-569888758\nconst BN = ecparams.n.constructor\n\nfunction loadCompressedPublicKey (first, xbuf) {\n  let x = new BN(xbuf)\n\n  // overflow\n  if (x.cmp(ecparams.p) >= 0) return null\n  x = x.toRed(ecparams.red)\n\n  // compute corresponding Y\n  let y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt()\n  if ((first === 0x03) !== y.isOdd()) y = y.redNeg()\n\n  return ec.keyPair({ pub: { x: x, y: y } })\n}\n\nfunction loadUncompressedPublicKey (first, xbuf, ybuf) {\n  let x = new BN(xbuf)\n  let y = new BN(ybuf)\n\n  // overflow\n  if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0) return null\n\n  x = x.toRed(ecparams.red)\n  y = y.toRed(ecparams.red)\n\n  // is odd flag\n  if ((first === 0x06 || first === 0x07) && y.isOdd() !== (first === 0x07)) return null\n\n  // x*x*x + b = y*y\n  const x3 = x.redSqr().redIMul(x)\n  if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null\n\n  return ec.keyPair({ pub: { x: x, y: y } })\n}\n\nfunction loadPublicKey (pubkey) {\n  // length should be validated in interface\n  const first = pubkey[0]\n  switch (first) {\n    case 0x02:\n    case 0x03:\n      if (pubkey.length !== 33) return null\n      return loadCompressedPublicKey(first, pubkey.subarray(1, 33))\n    case 0x04:\n    case 0x06:\n    case 0x07:\n      if (pubkey.length !== 65) return null\n      return loadUncompressedPublicKey(first, pubkey.subarray(1, 33), pubkey.subarray(33, 65))\n    default:\n      return null\n  }\n}\n\nfunction savePublicKey (output, point) {\n  const pubkey = point.encode(null, output.length === 33)\n  // Loop should be faster because we do not need create extra Uint8Array\n  // output.set(new Uint8Array(pubkey))\n  for (let i = 0; i < output.length; ++i) output[i] = pubkey[i]\n}\n\nmodule.exports = {\n  contextRandomize () {\n    return 0\n  },\n\n  privateKeyVerify (seckey) {\n    const bn = new BN(seckey)\n    return bn.cmp(ecparams.n) < 0 && !bn.isZero() ? 0 : 1\n  },\n\n  privateKeyNegate (seckey) {\n    const bn = new BN(seckey)\n    const negate = ecparams.n.sub(bn).umod(ecparams.n).toArrayLike(Uint8Array, 'be', 32)\n    seckey.set(negate)\n    return 0\n  },\n\n  privateKeyTweakAdd (seckey, tweak) {\n    const bn = new BN(tweak)\n    if (bn.cmp(ecparams.n) >= 0) return 1\n\n    bn.iadd(new BN(seckey))\n    if (bn.cmp(ecparams.n) >= 0) bn.isub(ecparams.n)\n    if (bn.isZero()) return 1\n\n    const tweaked = bn.toArrayLike(Uint8Array, 'be', 32)\n    seckey.set(tweaked)\n\n    return 0\n  },\n\n  privateKeyTweakMul (seckey, tweak) {\n    let bn = new BN(tweak)\n    if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1\n\n    bn.imul(new BN(seckey))\n    if (bn.cmp(ecparams.n) >= 0) bn = bn.umod(ecparams.n)\n\n    const tweaked = bn.toArrayLike(Uint8Array, 'be', 32)\n    seckey.set(tweaked)\n\n    return 0\n  },\n\n  publicKeyVerify (pubkey) {\n    const pair = loadPublicKey(pubkey)\n    return pair === null ? 1 : 0\n  },\n\n  publicKeyCreate (output, seckey) {\n    const bn = new BN(seckey)\n    if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1\n\n    const point = ec.keyFromPrivate(seckey).getPublic()\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyConvert (output, pubkey) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    const point = pair.getPublic()\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyNegate (output, pubkey) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    const point = pair.getPublic()\n    point.y = point.y.redNeg()\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyCombine (output, pubkeys) {\n    const pairs = new Array(pubkeys.length)\n    for (let i = 0; i < pubkeys.length; ++i) {\n      pairs[i] = loadPublicKey(pubkeys[i])\n      if (pairs[i] === null) return 1\n    }\n\n    let point = pairs[0].getPublic()\n    for (let i = 1; i < pairs.length; ++i) point = point.add(pairs[i].pub)\n    if (point.isInfinity()) return 2\n\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyTweakAdd (output, pubkey, tweak) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    tweak = new BN(tweak)\n    if (tweak.cmp(ecparams.n) >= 0) return 2\n\n    const point = pair.getPublic().add(ecparams.g.mul(tweak))\n    if (point.isInfinity()) return 2\n\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyTweakMul (output, pubkey, tweak) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    tweak = new BN(tweak)\n    if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) return 2\n\n    const point = pair.getPublic().mul(tweak)\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  signatureNormalize (sig) {\n    const r = new BN(sig.subarray(0, 32))\n    const s = new BN(sig.subarray(32, 64))\n    if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0) return 1\n\n    if (s.cmp(ec.nh) === 1) {\n      sig.set(ecparams.n.sub(s).toArrayLike(Uint8Array, 'be', 32), 32)\n    }\n\n    return 0\n  },\n\n  // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js\n  // Adapted for Uint8Array instead Buffer\n  signatureExport (obj, sig) {\n    const sigR = sig.subarray(0, 32)\n    const sigS = sig.subarray(32, 64)\n    if (new BN(sigR).cmp(ecparams.n) >= 0) return 1\n    if (new BN(sigS).cmp(ecparams.n) >= 0) return 1\n\n    const { output } = obj\n\n    // Prepare R\n    let r = output.subarray(4, 4 + 33)\n    r[0] = 0x00\n    r.set(sigR, 1)\n\n    let lenR = 33\n    let posR = 0\n    for (; lenR > 1 && r[posR] === 0x00 && !(r[posR + 1] & 0x80); --lenR, ++posR);\n\n    r = r.subarray(posR)\n    if (r[0] & 0x80) return 1\n    if (lenR > 1 && (r[0] === 0x00) && !(r[1] & 0x80)) return 1\n\n    // Prepare S\n    let s = output.subarray(6 + 33, 6 + 33 + 33)\n    s[0] = 0x00\n    s.set(sigS, 1)\n\n    let lenS = 33\n    let posS = 0\n    for (; lenS > 1 && s[posS] === 0x00 && !(s[posS + 1] & 0x80); --lenS, ++posS);\n\n    s = s.subarray(posS)\n    if (s[0] & 0x80) return 1\n    if (lenS > 1 && (s[0] === 0x00) && !(s[1] & 0x80)) return 1\n\n    // Set output length for return\n    obj.outputlen = 6 + lenR + lenS\n\n    // Output in specified format\n    // 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]\n    output[0] = 0x30\n    output[1] = obj.outputlen - 2\n    output[2] = 0x02\n    output[3] = r.length\n    output.set(r, 4)\n    output[4 + lenR] = 0x02\n    output[5 + lenR] = s.length\n    output.set(s, 6 + lenR)\n\n    return 0\n  },\n\n  // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js\n  // Adapted for Uint8Array instead Buffer\n  signatureImport (output, sig) {\n    if (sig.length < 8) return 1\n    if (sig.length > 72) return 1\n    if (sig[0] !== 0x30) return 1\n    if (sig[1] !== sig.length - 2) return 1\n    if (sig[2] !== 0x02) return 1\n\n    const lenR = sig[3]\n    if (lenR === 0) return 1\n    if (5 + lenR >= sig.length) return 1\n    if (sig[4 + lenR] !== 0x02) return 1\n\n    const lenS = sig[5 + lenR]\n    if (lenS === 0) return 1\n    if ((6 + lenR + lenS) !== sig.length) return 1\n\n    if (sig[4] & 0x80) return 1\n    if (lenR > 1 && (sig[4] === 0x00) && !(sig[5] & 0x80)) return 1\n\n    if (sig[lenR + 6] & 0x80) return 1\n    if (lenS > 1 && (sig[lenR + 6] === 0x00) && !(sig[lenR + 7] & 0x80)) return 1\n\n    let sigR = sig.subarray(4, 4 + lenR)\n    if (sigR.length === 33 && sigR[0] === 0x00) sigR = sigR.subarray(1)\n    if (sigR.length > 32) return 1\n\n    let sigS = sig.subarray(6 + lenR)\n    if (sigS.length === 33 && sigS[0] === 0x00) sigS = sigS.slice(1)\n    if (sigS.length > 32) throw new Error('S length is too long')\n\n    let r = new BN(sigR)\n    if (r.cmp(ecparams.n) >= 0) r = new BN(0)\n\n    let s = new BN(sig.subarray(6 + lenR))\n    if (s.cmp(ecparams.n) >= 0) s = new BN(0)\n\n    output.set(r.toArrayLike(Uint8Array, 'be', 32), 0)\n    output.set(s.toArrayLike(Uint8Array, 'be', 32), 32)\n\n    return 0\n  },\n\n  ecdsaSign (obj, message, seckey, data, noncefn) {\n    if (noncefn) {\n      const _noncefn = noncefn\n      noncefn = (counter) => {\n        const nonce = _noncefn(message, seckey, null, data, counter)\n\n        const isValid = nonce instanceof Uint8Array && nonce.length === 32\n        if (!isValid) throw new Error('This is the way')\n\n        return new BN(nonce)\n      }\n    }\n\n    const d = new BN(seckey)\n    if (d.cmp(ecparams.n) >= 0 || d.isZero()) return 1\n\n    let sig\n    try {\n      sig = ec.sign(message, seckey, { canonical: true, k: noncefn, pers: data })\n    } catch (err) {\n      return 1\n    }\n\n    obj.signature.set(sig.r.toArrayLike(Uint8Array, 'be', 32), 0)\n    obj.signature.set(sig.s.toArrayLike(Uint8Array, 'be', 32), 32)\n    obj.recid = sig.recoveryParam\n\n    return 0\n  },\n\n  ecdsaVerify (sig, msg32, pubkey) {\n    const sigObj = { r: sig.subarray(0, 32), s: sig.subarray(32, 64) }\n\n    const sigr = new BN(sigObj.r)\n    const sigs = new BN(sigObj.s)\n    if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1\n    if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero()) return 3\n\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 2\n\n    const point = pair.getPublic()\n    const isValid = ec.verify(msg32, sigObj, point)\n    return isValid ? 0 : 3\n  },\n\n  ecdsaRecover (output, sig, recid, msg32) {\n    const sigObj = { r: sig.slice(0, 32), s: sig.slice(32, 64) }\n\n    const sigr = new BN(sigObj.r)\n    const sigs = new BN(sigObj.s)\n    if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1\n\n    if (sigr.isZero() || sigs.isZero()) return 2\n\n    // Can throw `throw new Error('Unable to find sencond key candinate');`\n    let point\n    try {\n      point = ec.recoverPubKey(msg32, sigObj, recid)\n    } catch (err) {\n      return 2\n    }\n\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  ecdh (output, pubkey, seckey, data, hashfn, xbuf, ybuf) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    const scalar = new BN(seckey)\n    if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) return 2\n\n    const point = pair.getPublic().mul(scalar)\n\n    if (hashfn === undefined) {\n      const data = point.encode(null, true)\n      const sha256 = ec.hash().update(data).digest()\n      for (let i = 0; i < 32; ++i) output[i] = sha256[i]\n    } else {\n      if (!xbuf) xbuf = new Uint8Array(32)\n      const x = point.getX().toArray('be', 32)\n      for (let i = 0; i < 32; ++i) xbuf[i] = x[i]\n\n      if (!ybuf) ybuf = new Uint8Array(32)\n      const y = point.getY().toArray('be', 32)\n      for (let i = 0; i < 32; ++i) ybuf[i] = y[i]\n\n      const hash = hashfn(xbuf, ybuf, data)\n\n      const isValid = hash instanceof Uint8Array && hash.length === output.length\n      if (!isValid) return 2\n\n      output.set(hash)\n    }\n\n    return 0\n  }\n}\n","import HDKey from 'hdkey';\nimport * as ethUtil from 'ethereumjs-util';\nimport { Buffer } from 'buffer';\nvar publicToAddress = ethUtil.publicToAddress,\n    toChecksumAddress = ethUtil.toChecksumAddress;\nvar numberToGet = 5;\n\nfunction generateAddresses(account, offset) {\n  var publicKey = account.publicKey,\n      chainCode = account.chainCode,\n      path = account.path;\n  var hdk = new HDKey();\n  hdk.publicKey = new Buffer(publicKey, 'hex');\n  hdk.chainCode = new Buffer(chainCode, 'hex');\n  var addresses = [];\n\n  for (var i = offset; i < numberToGet + offset; i++) {\n    var dkey = hdk.deriveChild(i);\n    var address = publicToAddress(dkey.publicKey, true).toString('hex');\n    addresses.push({\n      dPath: \"\".concat(path, \"/\").concat(i),\n      address: toChecksumAddress(\"0x\".concat(address))\n    });\n  }\n\n  return addresses;\n}\n\nfunction isValidPath(path) {\n  var parts = path.split('/');\n\n  if (parts[0] !== 'm') {\n    return false;\n  }\n\n  if (parts[1] !== \"44'\") {\n    return false;\n  }\n\n  if (parts[2] !== \"60'\" && parts[2] !== \"1'\") {\n    return false;\n  }\n\n  if (parts[3] === undefined) {\n    return true;\n  }\n\n  var accountFieldDigit = Number(parts[3][0]);\n\n  if (isNaN(accountFieldDigit) || accountFieldDigit < 0 || parts[3][1] !== \"'\") {\n    return false;\n  }\n\n  if (parts[4] === undefined) {\n    return true;\n  }\n\n  var changeFieldDigit = Number(parts[4][0]);\n\n  if (isNaN(changeFieldDigit) || changeFieldDigit < 0) {\n    return false;\n  }\n\n  if (parts[5] === undefined) {\n    return true;\n  }\n\n  var addressFieldDigit = Number(parts[5][0]);\n\n  if (isNaN(addressFieldDigit) || addressFieldDigit < 0) {\n    return false;\n  }\n\n  return true;\n}\n\nexport { generateAddresses, isValidPath };"],"sourceRoot":""}